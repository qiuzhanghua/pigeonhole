/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.taiji;

import java.time.Duration;
import java.time.Instant;

public class App {
    static int[] smalls = {1, 2, 3, 4, 5, 6, 7, 8};
    static int[] larges = {12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49};
    static int[] holes = {9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11};
    static long count = 0;

    public static void main(String[] args) {
//        System.out.println(smalls.length);
//        System.out.println(larges.length);
//        System.out.println(holes.length);
//        holes[2] = 1;
//        holes[4] = 2;
//        holes[6] = 3;
//        holes[8] = 4;
//        holes[10] = 5;
//        holes[12] = 6;
//        holes[14] = 7;
//        holes[16] = 8;
//        permute_large(7);
        Instant start = Instant.now();
        permuteSmalls(8);
        Instant finish = Instant.now();
        long timeElapsed = Duration.between(start, finish).toMillis();
        System.out.printf("Time used: %d ms\n", timeElapsed);
        System.out.printf("Result = %d\n", count * 2);
    }

    public static void permuteSmalls(int num) {
        boolean[] used = new boolean[smalls.length];
        int[] result = new int[num];
        int depth = 0;
        backTrackingSmalls(result, depth, used);
    }

    public static void backTrackingSmalls(int[] result, int depth, boolean[] used) {
        if (depth == result.length) {
            permuteLarges(7);
//            System.out.println(Arrays.toString(holes));
            return;
        }
        for (int i = 0; i < smalls.length; i++) {
            if (!used[i]) {
                result[depth] = smalls[i];
                int index = 2 + depth * 2;
                holes[index] = smalls[i];
                used[i] = true;
                backTrackingSmalls(result, depth + 1, used);
                used[i] = false;
            }
        }
    }

    public static void permuteLarges(int num) {
        boolean[] used = new boolean[larges.length];
        int[] result = new int[num];
        int depth = 0;
        backTrackingLarges(result, depth, used);
    }

    public static void backTrackingLarges(int[] result, int depth, boolean[] used) {
        if (depth == result.length) {
            count += 1;
//            System.out.println(Arrays.toString(result));
            return;
        }
        for (int i = 0; i < larges.length; i++) {
            if (!used[i]) {
                result[depth] = larges[i];
                int index = 3 + depth * 2;
                if (holes[index - 1] * larges[i] > 99 || holes[index + 1] * larges[i] > 99) {
                    break;
                }
                used[i] = true;
                backTrackingLarges(result, depth + 1, used);
                used[i] = false;
            }
        }
    }
}